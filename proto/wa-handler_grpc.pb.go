// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/wa-handler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Handler_Handle_FullMethodName = "/proto.Handler/Handle"
)

// HandlerClient is the client API for Handler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandlerClient interface {
	Handle(ctx context.Context, opts ...grpc.CallOption) (Handler_HandleClient, error)
}

type handlerClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerClient(cc grpc.ClientConnInterface) HandlerClient {
	return &handlerClient{cc}
}

func (c *handlerClient) Handle(ctx context.Context, opts ...grpc.CallOption) (Handler_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Handler_ServiceDesc.Streams[0], Handler_Handle_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &handlerHandleClient{stream}
	return x, nil
}

type Handler_HandleClient interface {
	Send(*Event) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type handlerHandleClient struct {
	grpc.ClientStream
}

func (x *handlerHandleClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *handlerHandleClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HandlerServer is the server API for Handler service.
// All implementations should embed UnimplementedHandlerServer
// for forward compatibility
type HandlerServer interface {
	Handle(Handler_HandleServer) error
}

// UnimplementedHandlerServer should be embedded to have forward compatible implementations.
type UnimplementedHandlerServer struct {
}

func (UnimplementedHandlerServer) Handle(Handler_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

// UnsafeHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandlerServer will
// result in compilation errors.
type UnsafeHandlerServer interface {
	mustEmbedUnimplementedHandlerServer()
}

func RegisterHandlerServer(s grpc.ServiceRegistrar, srv HandlerServer) {
	s.RegisterService(&Handler_ServiceDesc, srv)
}

func _Handler_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HandlerServer).Handle(&handlerHandleServer{stream})
}

type Handler_HandleServer interface {
	Send(*Command) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type handlerHandleServer struct {
	grpc.ServerStream
}

func (x *handlerHandleServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *handlerHandleServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Handler_ServiceDesc is the grpc.ServiceDesc for Handler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Handler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Handler",
	HandlerType: (*HandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _Handler_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/wa-handler.proto",
}
